User:
  properties:
    login:      {type: string}
    firstName:  {type: string}
    lastName:   {type: string}
    email:      {type: string}
ModifyUserRequest:
  properties:
    firstName:  {type: string}
    lastName:   {type: string}
    email:      {type: string}
SystemInfo:
  properties:
    system:
      properties:
        timestamp:
          properties:
            epoch:    {type: number}
            unit:     {type: string}
            datetime: {type: string}
        rundeck:
          properties:
            version:     {type: string}
            build:       {type: string}
            node:        {type: string}
            base:        {type: string}
            apiversion:  {type: number}
            serverUUID:  {type: string}
        executions:
          properties:
            active:        {type: boolean}
            executionMode: {type: string}
        os:
          properties:
            arch:    {type: string}
            name:    {type: string}
            version: {type: string}
        jvm:
          properties:
            name:                  {type: string}
            vendor:                {type: string}
            version:               {type: string}
            implementationVersion: {type: string}
        stats:
          properties:
            uptime:
              properties:
                duration: {type: number}
                unit:     {type: string}
                since:
                  properties:
                    epoch:    {type: number}
                    unit:     {type: string}
                    datetime: {type: string}
            cpu:
              properties:
                loadAverage:
                  properties:
                    unit:    {type: string}
                    average: {type: number}
                processors: {type: number}
            memory:
              properties:
                unit:  {type: string}
                max:   {type: number}
                free:  {type: number}
                total: {type: number}
            scheduler:
              properties:
                running:        {type: number}
                threadPoolSize: {type: number}
            threads:
              properties:
                active: {type: number}
        metrics:
          properties:
            href:        {type: string}
            contentType: {type: string}
        threadDump:
          properties:
            href:        {type: string}
            contentType: {type: string}
LogStorage:
  properties:
    enabled:
      type: boolean
      description: True if plugin is configured
    pluginName:
      type: string
      description: Name of the configured plugin
    succeededCount:
      type: number
      description: Number of successful storage requests
    failedCount:
      type: number
      description: Number of failed storage requests
    queuedCount:
      type: number
      description: Number of queued storage requests
    totalCount:
      type: number
      description: Total number of storage requests (currently queued plus previously processed)
    incompleteCount:
      type: number
      description: Number of storage requests which have not completed successfully
    missingCount:
      type: number
      description: Number of executions for this cluster node which have no associated storage requests
IncompleteLogExecution:
  properties:
    id: {type: string}
    project: {type: string}
    href: {type: string}
    permalink: {type: string}
    storage:
      properties:
        localFilesPresent: {type: boolean}
        incompleteFiletypes: {type: array, items: {type: string}}
        queued: {type: boolean}
        failed: {type: boolean}
        date: {type: string}
    errors: {type: array, items: {type: string}}

IncompleteFileType:
  type: string
  enum: ['rdlog', 'state.json', 'execution.xml']
  description: Comma-separated list of filetypes which have not be uploaded, e.g. rdlog,state.json. Types are rdlog (log output), state.json (workflow state data), execution.xml (execution definition)

IncompleteLogExecutions:
  required:
  - total
  - max
  - offset
  - executions
  properties:
    total:  {type: number}
    max:    {type: number}
    offset: {type: number}
    executions:
      type: array
      items: {$ref: '#/definitions/IncompleteLogExecution'}

TakeoverScheduleRequest:
  properties:
    server:
      properties:
        uuid:    {type: string}
        all:     {type: boolean}
    project: {type: string}
    job:
      properties:
        id: {type: string}

JobReference:
  properties:
    href:             {type: string}
    permalink:        {type: string}
    id:               {type: string}
    pervious-owner:   {type: string}

TakeoverScheduleResponse:
  properties:
    takeoverSchedule:
      properties:
        project: {type: string}
        jobs:
          properties:
            failed:       {type: array, items: {$ref: '#/definitions/JobReference'}}
            successfull:  {type: array, items: {$ref: '#/definitions/JobReference'}}
            total:        {type: number}
        server:
          properties:
            uuid: {type: string}
            all:  {type: boolean}
    self:
      properties:
        server:
          properties:
            uuid: {type: string}
    message:    {type: string}
    apiversion: {type: number}
    success:    {type: boolean}

Project:
  properties:
    description: {type: string}
    name:        {type: string}
    url:         {type: string}
    config:      {type: object}

Job:
  properties:
    id:               {type: string}
    name:             {type: string}
    group:            {type: string}
    project:          {type: string}
    description:      {type: string}
    href:             {type: string}
    permalink:        {type: string}
    scheduled:        {type: boolean}
    scheduleEnabled:  {type: boolean}
    serverNodeUUID:   {type: string}
    serverOwner:      {type: string}
    enabled:          {type: boolean}

JobMetadata:
  properties:
    id:               {type: string}
    name:             {type: string}
    group:            {type: string}
    project:          {type: string}
    description:      {type: string}
    href:             {type: string}
    permalink:        {type: string}
    scheduled:        {type: boolean}
    scheduleEnabled:  {type: boolean}
    averageDuration:  {type: number}
    options:          {type: object}

JobBulkOperationResponse:
  required:
  - requestCount
  - allsuccessful
  properties:
    requestCount:
      description: The number of job IDs that were in the delete request.
      type: number
    allsuccessful: {type: boolean}
    succeeded:
      type: array
      items: {$ref: '#/definitions/BulkJobSucceededInfo'}
    failed:
      type: array
      items: {$ref: '#/definitions/BulkJobFailedInfo'}

JobInputFileListResponse:
  required:
  - paging
  - files
  properties:
    paging: {$ref: '#/definitions/Paging'}
    files:
      type: array
      items: {$ref: '#/definitions/JobInputFileInfo'}
  

JobInputFileInfo:
  required:
  - id
  - user
  - fileState
  - sha
  - jobId
  - dateCreated
  - serverNodeUUID
  - fileName
  - expirationDate
  - exec
  properties:
    id:              {type: string}
    user:            {type: string}
    fileState:       {type: string, enum: [temp, deleted, expired, retained]}
    sha:             {type: string}
    jobId:           {type: string}
    dateCreated:     {type: string}
    serverNodeUUID:  {type: string}
    fileName:        {type: string}
    size:            {type: integer}
    expirationDate:  {type: string}
    execId:          {type: string}

BulkJobSucceededInfo:
  required:
  - id
  - message
  properties:
    id:        {type: string}
    message:   {type: string}

BulkJobFailedInfo:
  required:
  - id
  - message
  - errorCode
  properties:
    id:        {type: string}
    errorCode: {type: string}
    message:   {type: string}


ExecutionList:
  properties:
    paging: {$ref: '#/definitions/Paging'}
    executions: {type: array, items: {$ref: '#/definitions/Execution'}}

Execution:
  properties:
    id:           {type: string}
    href:         {type: string}
    permalink:    {type: string} 
    status:       {type: string, enum: ['running', 'succeeded', 'failed', 'aborted', 'timedout', 'failed-with-retry', 'scheduled', 'other']}
    customStatus: {type: string}  
    project:      {type: string} 
    user:         {type: string}  
    serverUUID:   {type: string}   
    date-started:
      properties:
        unixtime: {type: number}
        date:     {type: string}
    job:             {$ref: '#/definitions/JobMetadata'}
    description:     {type: string}
    argstring:       {type: string}
    successfulNodes: {type: array, items: {type: string}}

JobExecutionDelete:
  properties:
    failedCount:   {type: number}
    successCount:  {type: number}
    allsuccessful: {type: boolean}
    requestCount:  {type: number}
    failures:
      type: array
      items:
        type: object
        properties:
          id:      {type: string}
          message: {type: string}

AclReference:
  properties:
    path:  {type: string}
    type:  {type: string}
    name:  {type: string}
    href:  {type: string}

AclList:
  properties:
    path:       {type: string}
    type:       {type: string}
    href:       {type: string}
    resources:  {type: array, items: {$ref: '#/definitions/AclReference'}}

AclPolicyResponse:
  required:
  - contents
  properties:
    contents:
      type: string
      description: Policy as JSON encoded YAML string

InvalidAclPolicyResponse:
  properties:
    valid: {type: boolean}
    policies:
      type: array
      items:
        type: object
        properties:
          policy: {type: string}
          errors: {type: array, items: {type: string}}

RetryExecutionRequest:
  properties:
    argString:
      description: Argument string to pass to the job, of the form `-opt value -opt2 value ...`
      type: string
    loglevel:
      description: Loglevel to use
      type: string
      enum: ['DEBUG', 'VERBOSE', 'INFO', 'WARN', 'ERROR']
    asUser:
      description: A username identifying the user who ran the job. Requires `runAs` permission.
      type: string
    options:
      description: Option value for option named `OPTNAME`. If specified the `argString` value is ignored (*API v18* or later).
      type: object

ExecuteJobRequest:
  properties:
    argString:
      description: Argument string to pass to the job, of the form `-opt value -opt2 value ...`
      type: string
    loglevel:
      description: Loglevel to use
      type: string
      enum: ['DEBUG', 'VERBOSE', 'INFO', 'WARN', 'ERROR']
    asUser:
      description: A username identifying the user who ran the job. Requires `runAs` permission.
      type: string
    filter:
      description: A node filter string.
      type: string
    runAtTime:
      description: Specify a time to run the job (*API v18* or later). `ISO-8601` format with optional milliseconds.
      type: string
    options:
      description: Option value for option named `OPTNAME`. If specified the `argString` value is ignored (*API v18* or later).
      type: object

StorageKeyMetaType:
  type: string
  enum: [private, public]
  x-ms-enum: {
    name: StorageKeyMetaType
  }

StorageKeyMetadata:
  properties:
    meta:
      properties:
        Rundeck-key-type:     {$ref: '#/definitions/StorageKeyMetaType'}
        Rundeck-content-mask: {type: string}
        Rundeck-content-size: {type: string}
        Rundeck-content-type: {type: string}
    url:  {type: string}
    name: {type: string} 
    type: {type: string}
    path: {type: string}

StorageKeyListResponse:
  properties:
    resources:
      type: array
      items: {$ref: '#/definitions/StorageKeyMetadata'}
    meta:
      properties:
        Rundeck-key-type:     {$ref: '#/definitions/StorageKeyMetaType'}
        Rundeck-content-mask: {type: string}
        Rundeck-content-size: {type: string}
        Rundeck-content-type: {type: string}
    url:  {type: string}
    type: {type: string}
    path: {type: string}

Paging:
  properties:
    count:  {type: integer}
    total:  {type: integer}
    offset: {type: integer}
    max:    {type: integer}

ExecutionOutput:
  required:
  - id
  - offset
  - completed
  - execCompleted
  - hasFailedNodes
  - execState
  - lastModified
  - execDuration
  - totalSize
  - retryBackoff
  - clusterExec
  - compacted
  - entries
  properties:
    id: {type: string}
    error: {type: string}
    empty: {type: boolean}
    offset: {type: string}
    completed: {type: boolean}
    execCompleted: {type: boolean}
    hasFailedNodes: {type: boolean}
    execState: {type: string}
    lastModified: {type: string}
    execDuration: {type: number}
    percentLoaded: {type: number}
    totalSize: {type: number}
    retryBackoff: {type: number}
    clusterExec: {type: boolean}
    compacted: {type: boolean}
    entries: {type: array, items: {$ref: '#/definitions/ExecutionOutputEntry'}}

ExecutionState:
  required:
  - executionId
  - serverNode
  - completed
  properties:
    executionId: {type: string}
    serverNode: {type: string}
    executionState: {$ref: '#/definitions/ExecutionStateState'}
    completed: {type: boolean}
    targetNodes: {type: array, items: {type: string}}
    allNodes: {type: array, items: {type: string}}
    stepCount: {type: number}
    updateTime: {type: string}
    startTime: {type: string}
    endTime: {type: string}
    nodes:
      type: object
      additionalProperties:
        type: array
        items: {$ref: '#/definitions/ExecutionStateNodeState'}
    steps:
      type: array
      items: {$ref: '#/definitions/ExecutionStateStep'}

ExecutionStateState:
  type: string
  enum: ['SUCCEEDED', 'FAILED', 'RUNNING', 'WAITING']
  description: State value as used in execution state output
  x-ms-enum: {
    name: ExecutionStateState
  }

ExecutionStateWorkflow:
  required:
  - completed
  properties:
    completed: {type: boolean}
    updateTime: {type: string}
    startTime: {type: string}
    endTime: {type: string}
    stepCount: {type: number}
    targetNodes: {type: array, items: {type: string}}
    allNodes: {type: array, items: {type: string}}
    steps:
      type: array
      items: {$ref: '#/definitions/ExecutionStateStep'}

ExecutionStateNodeState:
  required:
  - executionState
  - stepctx
  properties:
    executionState: {$ref: '#/definitions/ExecutionStateState'}
    stepctx: {type: string}

ExecutionStateStep:
  required:
  - id
  - stepctx
  - nodeStep
  - executionState
  - duration
  properties:
    id: {type: string}
    stepctx: {type: string}
    nodeStep: {type: boolean}
    executionState: {$ref: '#/definitions/ExecutionStateState'}
    duration: {type: number}
    startTime: {type: string}
    endTime: {type: string}
    updateTime: {type: string}
    nodeStates:
      type: object
      additionalProperties:
        $ref: '#/definitions/ExecutionStateStepNodeState'
    hasSubworkflow: {type: boolean}
    workflow: {$ref: '#/definitions/ExecutionStateWorkflow'}
    parameters:
      type: object
      additionalProperties: {type: string}
    parameterStates:
      type: object
      additionalProperties: {$ref: '#/definitions/ExecutionStateStep'}

ExecutionStateStepNodeState:
  required:
  - executionState
  - duration
  properties:
    executionState: {$ref: '#/definitions/ExecutionStateState'}
    duration: {type: number}
    startTime: {type: string}
    updateTime: {type: string}
    endTime: {type: string}


ExecutionOutputEntry:
  properties:
    time: {type: string}
    absolute_time: {type: string}
    log: {type: string}
    level: {type: string}
    stepctx: {type: string}
    node: {type: string}

WorkflowStep:
  properties:
    jobref:
      properties:
        name: {type: string}
        group: {type: string}
        uuid: {type: string}
        nodeStep: {type: string}
        importOptions: {type: boolean}
    jobId: {type: string}
    description: {type: string}
    exec: {type: string}
    script: {type: string}
    scriptfile: {type: string}
    scripturl: {type: string}
    type: {type: string}
    nodeStep: {type: string}
    workflow: {type: array, items: {$ref: '#/definitions/WorkflowStep'}}